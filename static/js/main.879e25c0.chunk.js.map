{"version":3,"sources":["components/monster-card/MonsterCard.component.jsx","components/monster-container/MonsterContainer.component.jsx","components/search-box/SearchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["MonsterCard","monster","className","src","id","alt","name","MonsterContainer","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","e","App","state","searchField","preventDefault","setState","target","value","console","log","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mVAYeA,G,MATK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,yBAAKC,UAAU,gBACb,yBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,uBAA2DC,IAAG,UAAKJ,EAAQK,KAAb,gBACtE,4BAAKL,EAAQK,SCOJC,G,MAVU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,OACE,yBAAKN,UAAU,qBACZM,EAASC,KAAI,SAACR,EAASS,GACvB,OAAO,kBAAC,EAAD,CAAaA,IAAKA,EAAKT,QAASA,UCM/BU,G,MAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,2BACEX,UAAU,aACVY,KAAK,SACLF,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAOH,EAAaG,QC0CrBC,G,iNA5CbC,MAAQ,CACNV,SAAU,GACVW,YAAa,I,EAafN,aAAe,SAACG,GACdA,EAAEI,iBACF,EAAKC,SAAS,CACZF,YAAaH,EAAEM,OAAOC,QACrB,kBAAMC,QAAQC,IAAI,EAAKP,MAAMC,iB,mFAdb,IAAD,OAClB,OAAOO,MAAM,8CACZC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,OAAO,EAAKT,SAAS,CACnBb,SAAUsB,S,+BAYN,IAAD,EAEoDC,KAAnDb,MAASV,EAFV,EAEUA,SAAUW,EAFpB,EAEoBA,YAAeN,EAAiBkB,KAAjBlB,aACpCmB,EAAmBxB,EAASyB,QAAO,SAAAhC,GACvC,OAAOA,EAAQK,KAAK4B,cAAcC,SAAShB,EAAYe,kBAGzD,OACE,yBAAKhC,UAAU,OACb,gDACA,kBAAC,EAAD,CACEU,YAAa,sBACbC,aAAcA,IAEhB,kBAAC,EAAD,CACEL,SAAUwB,S,GAvCFI,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.879e25c0.chunk.js","sourcesContent":["import React from 'react';\nimport './MonsterCard.styles.css';\n\nconst MonsterCard = ({ monster }) => {\n  return (\n    <div className=\"monster-card\">\n      <img src={`https://robohash.org/${monster.id}?=set2&size=180x180`} alt={`${monster.name}'s avatar'`}/>\n      <h2>{monster.name}</h2>\n    </div>\n  )\n};\n\nexport default MonsterCard;\n","import React from 'react';\nimport MonsterCard from '../monster-card/MonsterCard.component.jsx';\nimport './MonsterContainer.styles.css';\n\nconst MonsterContainer = ({ monsters }) => {\n  return (\n    <div className=\"monster-container\">\n      {monsters.map((monster, key) => {\n       return <MonsterCard key={key} monster={monster} />;\n      })}\n   </div>\n );\n};\n\nexport default MonsterContainer;\n","import React from 'react';\nimport './SearchBox.styles.css';\n\nconst SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      className=\"search-box\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={(e) => handleChange(e)}\n    />\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from 'react';\nimport MonsterContainer from './components/monster-container/MonsterContainer.component.jsx';\nimport SearchBox from './components/search-box/SearchBox.component.jsx';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    monsters: [],\n    searchField: '',\n  };\n\n  componentDidMount() {\n    return fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => {\n      return this.setState({\n        monsters: users\n      })\n    });\n  };\n\n  handleChange = (e) => {\n    e.preventDefault();\n    this.setState({\n      searchField: e.target.value\n    }, () => console.log(this.state.searchField));\n  };\n\n  render() {\n\n    const { state: { monsters, searchField }, handleChange } = this;\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase())\n    });\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder={\"Search for monsters\"}\n          handleChange={handleChange}\n        />\n        <MonsterContainer\n          monsters={filteredMonsters}\n        />\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}